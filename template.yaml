AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  website-monitor

Parameters:
  Stage:
    Type: String
  LogRetentionInDays:
    Type: Number
    Default: 7
  ConfigBucket:
    Type: String
  ConfigKeyName:
    Type: String
  Schedule:
    Type: String
    Default: "rate(20 minutes)"
  TweetTopic:
    Type: String


Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.7
    Environment:
      Variables:
        Stage: !Sub ${Stage}

Resources:
  WebMonitorBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  PipModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: web-monitor pip modules(python 3.x)
      ContentUri: src/layers/pip_modules
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.7
  BrowserKitLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: web-monitor headless browser modules(python 3.x)
      ContentUri: src/layers/browser_kit
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - python3.7

  TaskSchedulerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref PipModulesLayer
      CodeUri: src/task_scheduler/
      Environment:
        Variables:
          DetectWebsiteChangesTopic: !Ref DetectWebsiteChangesTopic
          DetectRSSEntryTopic: !Ref DetectRSSEntryTopic
          ConfigBucket: !Sub ${ConfigBucket}
          ConfigKeyName: !Sub ${ConfigKeyName}
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub ${ConfigBucket}
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DetectWebsiteChangesTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DetectRSSEntryTopic.TopicName
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: !Sub ${Schedule}
  TaskSchedulerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${TaskSchedulerFunction}
      RetentionInDays: !Sub ${LogRetentionInDays}

  DetectWebsiteChangesTopic:
    Type: AWS::SNS::Topic
  DetectWebsiteChangesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 20
      MemorySize: 1024
      Layers:
        - !Ref PipModulesLayer
        - !Ref BrowserKitLayer
      CodeUri: src/detect_website_changes/
      Environment:
        Variables:
          NextTopic: !Ref HandleEventsTopic
          WebMonitorBucket: !Ref WebMonitorBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebMonitorBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt HandleEventsTopic.TopicName
      Events:
        DetectWebsiteChangesEvent:
          Type: SNS
          Properties:
            Topic: !Ref DetectWebsiteChangesTopic
  DetectWebsiteChangesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DetectWebsiteChangesFunction}
      RetentionInDays: !Sub ${LogRetentionInDays}

  DetectRSSEntryTopic:
    Type: AWS::SNS::Topic
  DetectRSSEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 20
      MemorySize: 1024
      Layers:
        - !Ref PipModulesLayer
        - !Ref BrowserKitLayer
      CodeUri: src/detect_rss_entry/
      Environment:
        Variables:
          NextTopic: !Ref HandleEventsTopic
          WebMonitorBucket: !Ref WebMonitorBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref WebMonitorBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt HandleEventsTopic.TopicName
      Events:
        DetectRSSEntryEvent:
          Type: SNS
          Properties:
            Topic: !Ref DetectRSSEntryTopic
  DetectRSSEntryFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DetectRSSEntryFunction}
      RetentionInDays: !Sub ${LogRetentionInDays}


  HandleEventsTopic:
    Type: AWS::SNS::Topic
  HandleEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 128
      Layers:
        - !Ref PipModulesLayer
      CodeUri: src/handle_events/
      Environment:
        Variables:
          DetectWebsiteChangesTopic: !Ref HandleEventsTopic
          ConfigBucket: !Sub ${ConfigBucket}
          ConfigKeyName: !Sub ${ConfigKeyName}
          TweetTopic: !Sub ${TweetTopic}
      Policies:
        - S3CrudPolicy:
            BucketName: !Sub ${ConfigBucket}
        - SNSPublishMessagePolicy:
            TopicName:
              !Select
                - 5
                - !Split
                  - ":"
                  - !Sub ${TweetTopic}
      Events:
        Schedule:
          Type: SNS
          Properties:
            Topic: !Ref HandleEventsTopic
  HandleEventsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${HandleEventsFunction}
      RetentionInDays: !Sub ${LogRetentionInDays}
